/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockERC1155,
  MockERC1155Interface,
} from "../../contracts/MockERC1155";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017bb380380620017bb833981016040819052620000349162000070565b80620000408162000048565b5050620002a7565b6002620000568282620001db565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008457600080fd5b82516001600160401b03808211156200009c57600080fd5b818501915085601f830112620000b157600080fd5b815181811115620000c657620000c66200005a565b604051601f8201601f19908116603f01168101908382118183101715620000f157620000f16200005a565b8160405282815288868487010111156200010a57600080fd5b600093505b828410156200012e57848401860151818501870152928501926200010f565b82841115620001405760008684830101525b98975050505050505050565b600181811c908216806200016157607f821691505b6020821081036200018257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d657600081815260208120601f850160051c81016020861015620001b15750805b601f850160051c820191505b81811015620001d257828155600101620001bd565b5050505b505050565b81516001600160401b03811115620001f757620001f76200005a565b6200020f816200020884546200014c565b8462000188565b602080601f8311600181146200024757600084156200022e5750858301515b600019600386901b1c1916600185901b178555620001d2565b600085815260208120601f198616915b82811015620002785788860151825594840194600190910190840162000257565b5085821015620002975787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61150480620002b76000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80632eb2c2d6116100665780632eb2c2d6146101155780634e1273f414610128578063a22cb46514610148578063e985e9c51461015b578063f242432a1461019757600080fd5b8062fdd58e1461009757806301ffc9a7146100bd5780630e89341c146100e0578063156e29f614610100575b600080fd5b6100aa6100a5366004610c88565b6101aa565b6040519081526020015b60405180910390f35b6100d06100cb366004610ccb565b610240565b60405190151581526020016100b4565b6100f36100ee366004610cef565b610292565b6040516100b49190610d55565b61011361010e366004610d68565b610326565b005b610113610123366004610ee7565b610346565b61013b610136366004610f91565b610392565b6040516100b49190611097565b6101136101563660046110aa565b6104bc565b6100d06101693660046110e6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101136101a5366004611119565b6104cb565b60006001600160a01b03831661021a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061027157506001600160e01b031982166303a24d0760e21b145b8061028c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546102a19061117e565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd9061117e565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b50505050509050919050565b61034183838360405180602001604052806000815250610510565b505050565b6001600160a01b03851633148061036257506103628533610169565b61037e5760405162461bcd60e51b8152600401610211906111b8565b61038b8585858585610624565b5050505050565b606081518351146103f75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610211565b6000835167ffffffffffffffff81111561041357610413610d9b565b60405190808252806020026020018201604052801561043c578160200160208202803683370190505b50905060005b84518110156104b45761048785828151811061046057610460611206565b602002602001015185838151811061047a5761047a611206565b60200260200101516101aa565b82828151811061049957610499611206565b60209081029190910101526104ad81611232565b9050610442565b509392505050565b6104c7338383610801565b5050565b6001600160a01b0385163314806104e757506104e78533610169565b6105035760405162461bcd60e51b8152600401610211906111b8565b61038b85858585856108e1565b6001600160a01b0384166105705760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610211565b33600061057c85610a0b565b9050600061058985610a0b565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906105bb90849061124b565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461061b83600089898989610a56565b50505050505050565b81518351146106865760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610211565b6001600160a01b0384166106ac5760405162461bcd60e51b815260040161021190611263565b3360005b84518110156107935760008582815181106106cd576106cd611206565b6020026020010151905060008583815181106106eb576106eb611206565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561073b5760405162461bcd60e51b8152600401610211906112a8565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061077890849061124b565b925050819055505050508061078c90611232565b90506106b0565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516107e39291906112f2565b60405180910390a46107f9818787878787610bb1565b505050505050565b816001600160a01b0316836001600160a01b0316036108745760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610211565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166109075760405162461bcd60e51b815260040161021190611263565b33600061091385610a0b565b9050600061092085610a0b565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156109635760405162461bcd60e51b8152600401610211906112a8565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906109a090849061124b565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610a00848a8a8a8a8a610a56565b505050505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a4557610a45611206565b602090810291909101015292915050565b6001600160a01b0384163b156107f95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610a9a9089908990889088908890600401611320565b6020604051808303816000875af1925050508015610ad5575060408051601f3d908101601f19168201909252610ad291810190611365565b60015b610b8157610ae1611382565b806308c379a003610b1a5750610af561139e565b80610b005750610b1c565b8060405162461bcd60e51b81526004016102119190610d55565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610211565b6001600160e01b0319811663f23a6e6160e01b1461061b5760405162461bcd60e51b815260040161021190611428565b6001600160a01b0384163b156107f95760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610bf59089908990889088908890600401611470565b6020604051808303816000875af1925050508015610c30575060408051601f3d908101601f19168201909252610c2d91810190611365565b60015b610c3c57610ae1611382565b6001600160e01b0319811663bc197c8160e01b1461061b5760405162461bcd60e51b815260040161021190611428565b80356001600160a01b0381168114610c8357600080fd5b919050565b60008060408385031215610c9b57600080fd5b610ca483610c6c565b946020939093013593505050565b6001600160e01b031981168114610cc857600080fd5b50565b600060208284031215610cdd57600080fd5b8135610ce881610cb2565b9392505050565b600060208284031215610d0157600080fd5b5035919050565b6000815180845260005b81811015610d2e57602081850181015186830182015201610d12565b81811115610d40576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610ce86020830184610d08565b600080600060608486031215610d7d57600080fd5b610d8684610c6c565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610dd757610dd7610d9b565b6040525050565b600067ffffffffffffffff821115610df857610df8610d9b565b5060051b60200190565b600082601f830112610e1357600080fd5b81356020610e2082610dde565b604051610e2d8282610db1565b83815260059390931b8501820192828101915086841115610e4d57600080fd5b8286015b84811015610e685780358352918301918301610e51565b509695505050505050565b600082601f830112610e8457600080fd5b813567ffffffffffffffff811115610e9e57610e9e610d9b565b604051610eb5601f8301601f191660200182610db1565b818152846020838601011115610eca57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610eff57600080fd5b610f0886610c6c565b9450610f1660208701610c6c565b9350604086013567ffffffffffffffff80821115610f3357600080fd5b610f3f89838a01610e02565b94506060880135915080821115610f5557600080fd5b610f6189838a01610e02565b93506080880135915080821115610f7757600080fd5b50610f8488828901610e73565b9150509295509295909350565b60008060408385031215610fa457600080fd5b823567ffffffffffffffff80821115610fbc57600080fd5b818501915085601f830112610fd057600080fd5b81356020610fdd82610dde565b604051610fea8282610db1565b83815260059390931b850182019282810191508984111561100a57600080fd5b948201945b8386101561102f5761102086610c6c565b8252948201949082019061100f565b9650508601359250508082111561104557600080fd5b5061105285828601610e02565b9150509250929050565b600081518084526020808501945080840160005b8381101561108c57815187529582019590820190600101611070565b509495945050505050565b602081526000610ce8602083018461105c565b600080604083850312156110bd57600080fd5b6110c683610c6c565b9150602083013580151581146110db57600080fd5b809150509250929050565b600080604083850312156110f957600080fd5b61110283610c6c565b915061111060208401610c6c565b90509250929050565b600080600080600060a0868803121561113157600080fd5b61113a86610c6c565b945061114860208701610c6c565b93506040860135925060608601359150608086013567ffffffffffffffff81111561117257600080fd5b610f8488828901610e73565b600181811c9082168061119257607f821691505b6020821081036111b257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016112445761124461121c565b5060010190565b6000821982111561125e5761125e61121c565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000611305604083018561105c565b8281036020840152611317818561105c565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061135a90830184610d08565b979650505050505050565b60006020828403121561137757600080fd5b8151610ce881610cb2565b600060033d111561139b5760046000803e5060005160e01c5b90565b600060443d10156113ac5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156113dc57505050505090565b82850191508151818111156113f45750505050505090565b843d870101602082850101111561140e5750505050505090565b61141d60208286010187610db1565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061149c9083018661105c565b82810360608401526114ae818661105c565b905082810360808401526114c28185610d08565b9897505050505050505056fea2646970667358221220ca588d26b67ae4e49734012f50f8cf56ec9441431bf6e81303c08add4f41ad9664736f6c634300080f0033";

type MockERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC1155__factory extends ContractFactory {
  constructor(...args: MockERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC1155> {
    return super.deploy(_uri, overrides || {}) as Promise<MockERC1155>;
  }
  override getDeployTransaction(
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_uri, overrides || {});
  }
  override attach(address: string): MockERC1155 {
    return super.attach(address) as MockERC1155;
  }
  override connect(signer: Signer): MockERC1155__factory {
    return super.connect(signer) as MockERC1155__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC1155Interface {
    return new utils.Interface(_abi) as MockERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC1155 {
    return new Contract(address, _abi, signerOrProvider) as MockERC1155;
  }
}
